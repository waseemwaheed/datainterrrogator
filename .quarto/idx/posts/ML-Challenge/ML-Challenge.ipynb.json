{"title":"Crop classification in Satellite imagry","markdown":{"yaml":{"title":"Crop classification in Satellite imagry","author":"Waseem Waheed","date":"2022-01-10","categories":["Python","Machine Learning"],"image":"map.png","format":{"html":{"toc":true,"code-fold":true}},"freeze":true},"headingText":"Problem description","containsRefs":false,"markdown":"\n\nAs part of my ML practice, I was sent an ML challenge to develope a classifier that classfies pixels of hyperspectral images into various crops, which is an instance of a common problem known as crop mapping.\n\nThe satellite images in this instance are captured by the Sentinel-2 satellite.\n\n[Sentinel-2](https://en.wikipedia.org/wiki/Sentinel-2) is an earth observation mission by the European Space Agency.\n\n\nThe following is the challenge description:\n\n>You must implement a machine learning model to perform crop classification, and determine what crop types are grown where in an image of farm paddocks (also known as one-shot in-season crop classification). \n\n>Sentinel-2 is a satellite that captures 12 different wavelengths of light (also known as bands) in an image. These range from visible light (red, green, blue) to infra-red. The values for each band changes depending upon the material/object that is on the ground. \n\n# Provided code\n\n# Solution\n\nAfter reading the problem description carefully, we start by loading the provided dataset\n\nNo null columns, thats good.\n\nThere are 3 labels.\n\nLet's check the label counts.\n\nThe labels are imbalanced.\n\nLet's remove rows with cloud probability greater than 2 and check the counts again\n\nLet's check the data ranges of features.\n\n\n\n## 3. Mean values and +-2 standard deviations of all the bands per crop\n\n### 3.1 Other\n\nTo plot the $∓2σ$ standard deviations, we can plot box plots with the whiskers of the boxes at the $∓2σ$ by setting the whiskers to the percentiles 2.28, 97.72\n[Source](https://en.wikipedia.org/wiki/Percentile)\n\n### 3.2 Sorghum\n\n### 3.3 Cotton\n\nThis figure is promising as the values in the bands B6-B9 seem to be distinguishing features for the cotton crop. \n\n## 4. Machine learning model training\n\n\n\n### Step 1: Baseline model: Multiclass Logistic Regression\n\nThe first model I am going to try is the multiclass logistic regression for it's simplicity to get an idea about the possible accuracy.\n\nThis initial result is consistent with our initial intuition, *Cotton* is easier classify than *Other* and *Sorghum*.\n\nIt might a good idea to search the literature at this point for discriminative features.\n\nI'm going to attempt to try to focus on the *Sorghum* vs *Other* problem next.\n\n### Step 2: Binary classification (*Sorghum* vs *Other*)\n\nThe data is highly imbalanced, as a first attempt to fix that, let's try to add weights.\n\n### Step 3: Binary classification with Random Forest\n\n#### Step 3.1: Binary classification with Random Forest and Remote Sensing \nNext, we test the benefit of adding NDVI and NDWI indices\n\nNDVI: The normalized difference vegetation index, an effective index for quantifying green vegetation.\n\nNDWI: The normalized difference water index used to monitor changes related to water content in water bodies.\n\nNDMI: The normalized difference moisture index used to monitor changes in water content of leaves.\n\nFor a full list of remote sensing indices https://custom-scripts.sentinel-hub.com/custom-scripts/sentinel-2/indexdb/\n\n### Step 4: Random under- and over-sampling\n\nTo solve the data imbalance issue, let's use resampling techinques. \n\nFirst we are going to start by under-sampling, that is to randomly pick samples from the majority group such that the majority and minority classes become of the same size.\n\n**Undersampling**\n\nSince features B03, B04, B05, B07, B08 seem to have the least effect, let's try removing them\n\nNext, I will test the accuracy on the full data (including Sorghum)\n\nI am going to pick the model with RandomDownSampler as it gives satisfactory results for the current data, the next step is a feature selection process.\n\nNext, we perform feature selection to find the most important features.\n\n## 5. Satellite images \nNow that we have trained a model, let's try to apply it to the images provided\n\n## Reminder\n* Red is Other\n* Green is Sorghum\n* Blue is Cotton\n\n## Observations\n* Many paddocks' predictions are noisy, especially for Sorghum and Other. \n* The boundary of the Cotton Paddocks are always mispredicted.\n\n## Data and training observation\n* The training data is highly imbalanced\n* Using weights for the classifier is not the best option\n* The generated features (NDVI and NDWI) are not discriminative\n\n\n## Next steps\n* In the current experiment, we built a pixel classifier. We can build a patch level classifier as a next step, which can potentially reduce the class noise we are seeing in the earlier label image because it would provide more context to the classifier compared to the pixel level classifier.\n* Another potential solution to the class noise issue is to introduce more discriminative features by exploring various feature combinations as well as generating new features.\n* Improving the quality of the training data by introducing a QA process to the data labelling. The QA process could involving relying on other data sources other than satellite images.\n* Hyperparameter tuning can be performed using cross validation and grid search methods as a next step to further improve the model performance (https://towardsdatascience.com/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74).\n\n\n## Resources\n\n* [Imbalanced data](https://www.kaggle.com/rafjaa/resampling-strategies-for-imbalanced-datasets)\n* [Satellite image deep learning repo](https://github.com/robmarkcole/satellite-image-deep-learning)\n","srcMarkdownNoYaml":"\n\nAs part of my ML practice, I was sent an ML challenge to develope a classifier that classfies pixels of hyperspectral images into various crops, which is an instance of a common problem known as crop mapping.\n\nThe satellite images in this instance are captured by the Sentinel-2 satellite.\n\n[Sentinel-2](https://en.wikipedia.org/wiki/Sentinel-2) is an earth observation mission by the European Space Agency.\n\n# Problem description\n\nThe following is the challenge description:\n\n>You must implement a machine learning model to perform crop classification, and determine what crop types are grown where in an image of farm paddocks (also known as one-shot in-season crop classification). \n\n>Sentinel-2 is a satellite that captures 12 different wavelengths of light (also known as bands) in an image. These range from visible light (red, green, blue) to infra-red. The values for each band changes depending upon the material/object that is on the ground. \n\n# Provided code\n\n# Solution\n\nAfter reading the problem description carefully, we start by loading the provided dataset\n\nNo null columns, thats good.\n\nThere are 3 labels.\n\nLet's check the label counts.\n\nThe labels are imbalanced.\n\nLet's remove rows with cloud probability greater than 2 and check the counts again\n\nLet's check the data ranges of features.\n\n\n\n## 3. Mean values and +-2 standard deviations of all the bands per crop\n\n### 3.1 Other\n\nTo plot the $∓2σ$ standard deviations, we can plot box plots with the whiskers of the boxes at the $∓2σ$ by setting the whiskers to the percentiles 2.28, 97.72\n[Source](https://en.wikipedia.org/wiki/Percentile)\n\n### 3.2 Sorghum\n\n### 3.3 Cotton\n\nThis figure is promising as the values in the bands B6-B9 seem to be distinguishing features for the cotton crop. \n\n## 4. Machine learning model training\n\n\n\n### Step 1: Baseline model: Multiclass Logistic Regression\n\nThe first model I am going to try is the multiclass logistic regression for it's simplicity to get an idea about the possible accuracy.\n\nThis initial result is consistent with our initial intuition, *Cotton* is easier classify than *Other* and *Sorghum*.\n\nIt might a good idea to search the literature at this point for discriminative features.\n\nI'm going to attempt to try to focus on the *Sorghum* vs *Other* problem next.\n\n### Step 2: Binary classification (*Sorghum* vs *Other*)\n\nThe data is highly imbalanced, as a first attempt to fix that, let's try to add weights.\n\n### Step 3: Binary classification with Random Forest\n\n#### Step 3.1: Binary classification with Random Forest and Remote Sensing \nNext, we test the benefit of adding NDVI and NDWI indices\n\nNDVI: The normalized difference vegetation index, an effective index for quantifying green vegetation.\n\nNDWI: The normalized difference water index used to monitor changes related to water content in water bodies.\n\nNDMI: The normalized difference moisture index used to monitor changes in water content of leaves.\n\nFor a full list of remote sensing indices https://custom-scripts.sentinel-hub.com/custom-scripts/sentinel-2/indexdb/\n\n### Step 4: Random under- and over-sampling\n\nTo solve the data imbalance issue, let's use resampling techinques. \n\nFirst we are going to start by under-sampling, that is to randomly pick samples from the majority group such that the majority and minority classes become of the same size.\n\n**Undersampling**\n\nSince features B03, B04, B05, B07, B08 seem to have the least effect, let's try removing them\n\nNext, I will test the accuracy on the full data (including Sorghum)\n\nI am going to pick the model with RandomDownSampler as it gives satisfactory results for the current data, the next step is a feature selection process.\n\nNext, we perform feature selection to find the most important features.\n\n## 5. Satellite images \nNow that we have trained a model, let's try to apply it to the images provided\n\n## Reminder\n* Red is Other\n* Green is Sorghum\n* Blue is Cotton\n\n## Observations\n* Many paddocks' predictions are noisy, especially for Sorghum and Other. \n* The boundary of the Cotton Paddocks are always mispredicted.\n\n## Data and training observation\n* The training data is highly imbalanced\n* Using weights for the classifier is not the best option\n* The generated features (NDVI and NDWI) are not discriminative\n\n\n## Next steps\n* In the current experiment, we built a pixel classifier. We can build a patch level classifier as a next step, which can potentially reduce the class noise we are seeing in the earlier label image because it would provide more context to the classifier compared to the pixel level classifier.\n* Another potential solution to the class noise issue is to introduce more discriminative features by exploring various feature combinations as well as generating new features.\n* Improving the quality of the training data by introducing a QA process to the data labelling. The QA process could involving relying on other data sources other than satellite images.\n* Hyperparameter tuning can be performed using cross validation and grid search methods as a next step to further improve the model performance (https://towardsdatascience.com/hyperparameter-tuning-the-random-forest-in-python-using-scikit-learn-28d2aa77dd74).\n\n\n## Resources\n\n* [Imbalanced data](https://www.kaggle.com/rafjaa/resampling-strategies-for-imbalanced-datasets)\n* [Satellite image deep learning repo](https://github.com/robmarkcole/satellite-image-deep-learning)\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"ML-Challenge.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"slate","title-block-banner":true,"title":"Crop classification in Satellite imagry","author":"Waseem Waheed","date":"2022-01-10","categories":["Python","Machine Learning"],"image":"map.png"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}