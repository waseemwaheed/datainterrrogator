{"title":"A solution to a coding challenge","markdown":{"yaml":{"title":"A solution to a coding challenge","author":"Waseem Waheed","date":"2021-08-13","categories":["Python","Docker","Software Engineering","Data Structures"],"format":{"html":{"toc":true}}},"headingText":"Introduction","containsRefs":false,"markdown":"\n\nI have recently been invited to a coding challenge which was required to be delivered in 7 days. The task was very simple üòé:\n\n> # Coding challenge\n>\n> The aim of this exercise is to implement an \"alerting\" service which will consume a file of currency conversion rates and\n> produce alerts.\n>\n>For the purpose of this coding exercise, you are allowed to choose a different programming language,\n> provided that you provide us with a detailed instruction on how to build and run your program.\n>\n>\n>### Input\n>\n> The format of the file will simulate a stream of currency\n>conversion rates. Each line will be properly structured\n> JSON (http://jsonlines.org/):\n> \n>  { \"timestamp\": 1554933784.023, \"currencyPair\": \"CNYAUD\", \"rate\": 0.39281 }\n>\n>    The fields in the JSON record are:\n>- timestamp: the timestamp of the record in seconds since UNIX epoch, \n>   with fractional seconds specified\n> - currencyPair: the sell and buy currencies which the rate relates to\n> - rate: the conversion rate\n> \n> You may assume that for each currency pair, currency conversion rates are streamed\n>at a constant rate of one per second. ie. for two consecutive \"CNYAUD\" entries in\n> in the input file, they will have timestamps that differ by one second:\n> \n>     { \"timestamp\": 1554933784.023, \"currencyPair\": \"CNYAUD\", \"rate\": 0.39281 }\n>    { \"timestamp\": 1554933784.087, \"currencyPair\": \"USDAUD\", \"rate\": 0.85641 }\n>     { \"timestamp\": 1554933785.023, \"currencyPair\": \"CNYAUD\", \"rate\": 0.39295 }\n> \n> ### Output\n>\n> The alerting service should produce the following alert as a JSON string output to\n>standard output:\n> \n> - when the spot rate for a currency pair changes by more than 10% from the 5 minute average for that currency pair\n> \n>The format of the alert produced should be:\n> \n>    { \"timestamp\": 1554933784.023, \"currencyPair\": \"CNYAUD\", \"alert\": \"spotChange\" }\n> \n\nAs mentioned earlier, the task is very simple but I wanted to take the opportunity to improve the following aspects:\n\n* Code readability\n* Unit testing\n* Deployability\n\n## Code readability\nI use VSCODE for many tasks, and it is my main text editor so naturally, I looked for tools that play well with it. For automatic code styling, I used [*black*](https://github.com/psf/black) which is a great code formatter. Additionally, I revised the [PEP 8](https://www.python.org/dev/peps/pep-0008/) guide to refresh my memory of best practices.\n\n## Unit Testing\n\nThe idea behind unit testing is that you have to arrange your code into non-coupled components to allow for testing.  In the Python ecosystem there are few options such as the [unittest](https://docs.python.org/3/library/unittest.html) which comes as part of the [Python Standard Library](https://docs.python.org/3/library/) and [pytest](https://docs.pytest.org/en/6.2.x/). I ended up using pytest because I wanted to learn it.\n\n## Deployability \nPython, similar to other interpreted languages, requires a compatible version of the interpreter and the same version of packages (excluding Javascript, where every computer nowadays comes with one). This is a common issue that has many solutions. Among those solutions are the virtual \n\nnments such as ([venv](https://docs.python.org/3/library/venv.html), [virtualenv](https://virtualenv.pypa.io/en/latest/), [conda env](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html)) and containers such as the well-known [docker](https://www.docker.com/). \n\nThe simplicity and ubiquity of docker made it a simple choice üëç for me in this challenge. Once the code is written and tested, docker image description file is all that is needed. The alternative path of virtual environment was also a viable one, I just had to write environment creation scripts, one for windows and one for Unix/Linux ü•±. \n\n# My solution\n\nYou can access the solution over [here](https://github.com/waseemwaheed/coding-challenge/tree/main/awcc) .\n\n## Assumptions\n* One input file can be consumed at a time.\n* The frequency at which updates arrive is fixed (1s). Hence the average, in the general case, is taken over 300 samples.\n* A single stream (input file) can contain more than one currency pair.\n\n## Decisions\n* To keep track of the exchange rates for each pair, I made the currency pairs keys of a dictionary which maps to sliding window [deque](https://docs.python.org/3/library/collections.html#collections.deque) data structure.\n  * The rationale behind choosing a dictionary is because, each new line can be new data point for a currency pair, which means the currency pairs data need to be accessed in random order and a dictionary is the best options here where an access operation is $O(1)$\n  * The rationale behind choosing a deque is that it allows for the easy creation of a sliding window. A deque has $O(1)$ complexity when we append to or access the ends of the queue, which is what we are doing here.\n\n* The `CurrencyPairData` class is a subclass of the `Observable` class. This allows me to easily add callbacks to `CurrencyPairData` instances. \n\n\n# In the end\nThe coding challenge was a fun opportunity to build something and get someone to give me feedback on my approach. Additionally, I had a ton of fun learning about *pytest* and *docker* which will definitely be used in my other projects. \n\n","srcMarkdownNoYaml":"\n# Introduction \n\nI have recently been invited to a coding challenge which was required to be delivered in 7 days. The task was very simple üòé:\n\n> # Coding challenge\n>\n> The aim of this exercise is to implement an \"alerting\" service which will consume a file of currency conversion rates and\n> produce alerts.\n>\n>For the purpose of this coding exercise, you are allowed to choose a different programming language,\n> provided that you provide us with a detailed instruction on how to build and run your program.\n>\n>\n>### Input\n>\n> The format of the file will simulate a stream of currency\n>conversion rates. Each line will be properly structured\n> JSON (http://jsonlines.org/):\n> \n>  { \"timestamp\": 1554933784.023, \"currencyPair\": \"CNYAUD\", \"rate\": 0.39281 }\n>\n>    The fields in the JSON record are:\n>- timestamp: the timestamp of the record in seconds since UNIX epoch, \n>   with fractional seconds specified\n> - currencyPair: the sell and buy currencies which the rate relates to\n> - rate: the conversion rate\n> \n> You may assume that for each currency pair, currency conversion rates are streamed\n>at a constant rate of one per second. ie. for two consecutive \"CNYAUD\" entries in\n> in the input file, they will have timestamps that differ by one second:\n> \n>     { \"timestamp\": 1554933784.023, \"currencyPair\": \"CNYAUD\", \"rate\": 0.39281 }\n>    { \"timestamp\": 1554933784.087, \"currencyPair\": \"USDAUD\", \"rate\": 0.85641 }\n>     { \"timestamp\": 1554933785.023, \"currencyPair\": \"CNYAUD\", \"rate\": 0.39295 }\n> \n> ### Output\n>\n> The alerting service should produce the following alert as a JSON string output to\n>standard output:\n> \n> - when the spot rate for a currency pair changes by more than 10% from the 5 minute average for that currency pair\n> \n>The format of the alert produced should be:\n> \n>    { \"timestamp\": 1554933784.023, \"currencyPair\": \"CNYAUD\", \"alert\": \"spotChange\" }\n> \n\nAs mentioned earlier, the task is very simple but I wanted to take the opportunity to improve the following aspects:\n\n* Code readability\n* Unit testing\n* Deployability\n\n## Code readability\nI use VSCODE for many tasks, and it is my main text editor so naturally, I looked for tools that play well with it. For automatic code styling, I used [*black*](https://github.com/psf/black) which is a great code formatter. Additionally, I revised the [PEP 8](https://www.python.org/dev/peps/pep-0008/) guide to refresh my memory of best practices.\n\n## Unit Testing\n\nThe idea behind unit testing is that you have to arrange your code into non-coupled components to allow for testing.  In the Python ecosystem there are few options such as the [unittest](https://docs.python.org/3/library/unittest.html) which comes as part of the [Python Standard Library](https://docs.python.org/3/library/) and [pytest](https://docs.pytest.org/en/6.2.x/). I ended up using pytest because I wanted to learn it.\n\n## Deployability \nPython, similar to other interpreted languages, requires a compatible version of the interpreter and the same version of packages (excluding Javascript, where every computer nowadays comes with one). This is a common issue that has many solutions. Among those solutions are the virtual \n\nnments such as ([venv](https://docs.python.org/3/library/venv.html), [virtualenv](https://virtualenv.pypa.io/en/latest/), [conda env](https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html)) and containers such as the well-known [docker](https://www.docker.com/). \n\nThe simplicity and ubiquity of docker made it a simple choice üëç for me in this challenge. Once the code is written and tested, docker image description file is all that is needed. The alternative path of virtual environment was also a viable one, I just had to write environment creation scripts, one for windows and one for Unix/Linux ü•±. \n\n# My solution\n\nYou can access the solution over [here](https://github.com/waseemwaheed/coding-challenge/tree/main/awcc) .\n\n## Assumptions\n* One input file can be consumed at a time.\n* The frequency at which updates arrive is fixed (1s). Hence the average, in the general case, is taken over 300 samples.\n* A single stream (input file) can contain more than one currency pair.\n\n## Decisions\n* To keep track of the exchange rates for each pair, I made the currency pairs keys of a dictionary which maps to sliding window [deque](https://docs.python.org/3/library/collections.html#collections.deque) data structure.\n  * The rationale behind choosing a dictionary is because, each new line can be new data point for a currency pair, which means the currency pairs data need to be accessed in random order and a dictionary is the best options here where an access operation is $O(1)$\n  * The rationale behind choosing a deque is that it allows for the easy creation of a sliding window. A deque has $O(1)$ complexity when we append to or access the ends of the queue, which is what we are doing here.\n\n* The `CurrencyPairData` class is a subclass of the `Observable` class. This allows me to easily add callbacks to `CurrencyPairData` instances. \n\n\n# In the end\nThe coding challenge was a fun opportunity to build something and get someone to give me feedback on my approach. Additionally, I had a ton of fun learning about *pytest* and *docker* which will definitely be used in my other projects. \n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"toc":true,"output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"slate","title-block-banner":true,"title":"A solution to a coding challenge","author":"Waseem Waheed","date":"2021-08-13","categories":["Python","Docker","Software Engineering","Data Structures"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}