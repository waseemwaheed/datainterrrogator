{"title":"Efficient Data Analysis - SQL and Python","markdown":{"yaml":{"title":"Efficient Data Analysis - SQL and Python","author":"Waseem Waheed","date":"2021-08-10","categories":["Python","SQL"]},"headingText":"Introduction","containsRefs":false,"markdown":"\n\n\n\nPerforming data analysis, in many cases, requires loading the data from a database. Database engines are optimized for the efficient handling of data storage and retrieval. If the data is structured, which means the data follows a schema, querying the database is always performed using SQL, a domain specific language for data querying among other things.\n\nI have been using Jupyter notebooks for 4 years now, and I think the notebook concept is transformational. Being able to mix the analysis with the compute in one linear document is great. The other day I was looking at some SQL queries and thought to myself, I wish that could write those queries in Jupyter notebooks just like I do with Python, I had previously tried Matlab and Julia, why not SQL?\n\nAs you would imagine, the community has thought about this question way before I did and someone has made that possible in the form of a IPython extension 😍.\n\nThis post is my attempt at using SQL in the Jupyter notebook environment. The data we are going to use in this excercise the **20 years of Olympic history: athletes and results** from [Kaggle](https://www.kaggle.com/heesoo37/120-years-of-olympic-history-athletes-and-results). The analysis presented here is for practice only and for more detailed analysis of the olympic games, check [Olympians are probably older — and younger — than you think](https://www.washingtonpost.com/sports/olympics/2021/07/31/oldest-youngest-olympians/).\n\n\n\n## Motivation\n\nI have few reasons for writing this article:\n1. As a reminder for my future self, cause I tend to move on and forget 😅 as you can imagine,\n2. I hope it serves as an inspiration to you, the reader, to utilize this capability if you like it,\n3. Practice SQL, which I can't have enough of,\n4. Being able to send the calculations to the data rather than bring the data to compute is a super power in the Big Data era,\n5. Bringing the result of SQL queries back to Python rather than querying the database directly or using something like [SQL Server Management Studio](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms) or [MySQL Workbench](https://www.mysql.com/products/workbench/) allows us to visualize the data in whatever way we like.\n\n\nIt is important to mention that whatever we are doing here can be done within `Pandas` directly, however from a [scalability and effeciency perspectives](https://pandas.pydata.org/pandas-docs/stable/user_guide/scale.html), the ability to do most of the filtering and summerization at the database level is a clear advantage. \n\nThe database can be hosted anywhere. Which means the machine on which the analysis is carried out doesn't need to be highly resourced.\n\n### Why not an ORM?\nORM stands for Object Relational Mapping which according to [wikipedia](https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping):\n> a programming technique for converting data between incompatible type systems using object-oriented programming languages. This creates, in effect, a \"virtual object database\" that can be used from within the programming language.\n\nORMs hide the typical SQL interaction from the software developer, exposing the database as classes and objects with getters and setters. An typical example of an ORM are `SQLAlchemy` and `SQLModel` which builds on top `SQLAlchemy`. If you think that this is a good idea, I tend to agree as do most web frameworks but, the goal of this article is not to run away from SQL but to embrace it as universal tool that can be utilized on its own and in combination with most programming languages.\n\n### Why not Spark (or the likes)\nThis is a great question. If you have heard of Big Data tools such as [Spark](https://spark.apache.org/), this question would defintely come to your mind. Spark does what we are trying to achieve, and I am planning to cover it in a follow up writeup.\n\n\nHopefully, I managed to convince you of the benefits of being able to query databases using SQL rather than doing the same analysis in Pandas.\n\n\n\n## Required packages\n\nI am going to use the following packages in this article:\n\n* [`ipython-sql`](https://pypi.org/project/ipython-sql/)\n* [`Pandas`](https://pandas.pydata.org/)\n* [`Matplotlib`](https://matplotlib.org/)\n* [`SQLAlchemy`](https://www.sqlalchemy.org/)\n\n## Connecting to database\n\nThis first step is to establish a connection to the database you would like to work on. We are going to use the `ipython-sql` extension to write and pass our SQL queries. `ipython-sql` expects database string similar to those used by `SQLAlcehmy`. For more details about the database strings check [this page](https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls).\n\nIn this article, I am going to use a local installation of [Microsoft SQL Server 2019 Express](https://www.microsoft.com/en-au/sql-server/sql-server-downloads). I have already downloaded MS-SQL server already and installed it. I then created a new database named `OlympicsHistory` and imported the two csv files from the Olympic History dataset into this database as a tables named `athlete_events`, `noc_region` .\n\n## How to handle queries and results\n\nNow that you succeeded connecting to the database, let's see how can we bring data from the database into Python. The `ipython-sql` extension offers three mode of access:\n\n    1. Print the results\n    2. Assignning the result of a single-line query \n    3. Assignning the result of a multi-line query\n\n**Note:** ignore the details of the queries for now and let's focus on the handling of queries, we will return to the details of the queries in the following section.\n\n###  1. Print the results\nYou use the magic command ([to learn more](https://ipython.readthedocs.io/en/stable/interactive/magics.html)) `%sql` for a single line and `%%sql` for multi-line queries. \n\n1.1. Single line query\n\n1.2. Multi-line query\n\n### 2. Assignning the result of a single-line query \n\nIf have used Python for data analysis, you might say this cool but, it would even nice if we could capture the result of the query as `Pandas` DataFrame! If you had this question in mind, to you I say, it is straight forward to that, have a look:\n\nI hope that you can see the power in what I just demonstrated.\n\n## Data Analysis using SQL\n\nEnough of the preparation, let's into the fun part, analysing the data, asking and answering questions about it.\n\nAs a first step, let's familiarize ourselves with the two tables we have\n\nLooking up `SGP` reveals that this is the code for [Singapore](https://olympics.com/ioc/singapore). This begs the question, why was this code missing from the `noc_regions` table? Let's further investigate this table\n\nLet's further investigate the `athlete_events` table for instances of the codes `SIN` and `SGP` \n\nOk, so the code `SIN` has never been used in the `athlete_events`. A quick [web search](https://www.facebook.com/sgolympics/photos/a.1591488417735290/1747292968821500/?type=3) revealed that `SGP` has replaced `SIN` in 2016.\n\nIn this case, I think, it would be a good idea to keep both codes in the `noc_regions` table. Let's add `SGP`\n\nThere seems to be a bug in `SQLAlchemy` which makes ealier SQL code error. We can safely ignore this error as the code seems to be doing what is supposed to do, let's verify:\n\nWe can now perform joins without any `NULL`s.\n\nLet's begin with the data interrogation:\n\n#### Which cities host the Olympics more that once?\n\n#### Find the seasons for each year as two columns (Summer, Winter)\n\n#### What is the average age of participants?\n\n#### What is the average age per season?\n\n#### Is the average age fixed across the seasons and years?\n\nThe average for summer Olympics in 1932 looks too high, is this a valid result? if yes why did it happen?\n\nSo, the average age was high, why is that the case?\nLet's look at a more statistics about the games broken down by year and season.\n\nIt is clear that there's a high variability in participants ages in 1932. Let's have a closer look at the data to find out what could the reason behind that be. \n\nIn which sport did older participants take part in?\n\nOh, the older folks participated in Art Competitions.\nLet's see what impact does removing `Art Competitions` have on the age distribution.\n\nI am statisfied with this now, it seems to match the result reported in [here](https://www.washingtonpost.com/sports/olympics/2021/07/31/oldest-youngest-olympians/).\n\n#### What is trend of age in each season? \nThis is a fun question, let's try to find the slope of the best fit line across the previous plots. This can be achieved by implementing the equation of the slope of single variable linear regression:\n$$b= \\frac{n\\sum{xy} - \\sum{x}\\sum{y}}{n\\sum{x^2}-(\\sum{x})^2}$$\n\nWe can see a stronger negative trend in summer events than in winter events.\n\n#### What is the number of participating nations for each year and season?\n\nFew observation:\n* The number of participating nations has been increasing since the inception of the first Olympic season in 1896.\n* The first winter Olympics was held in 1924. \n* Less nations participate in the winter Olympics as compared with the summer ones. \n* Since 1992, the Olympics are held every two years for alternating seasons.\n\n####  In which years and seasons did Iraq not participate in the Olympics?\n\n#### What is the number of medals per Sport for sports which have more than 500 medals granted?\n\n#### Which countries participated less than 5 times in the Olympics?\n\n#### Which are the top 5 countries by the number of Judo players?\n\n#### What is percentage of Judo players in each of these countries?\n\n#### Which are the top 5 countries by the number of medals in judo?\n\n#### Who are the top 5 players who participated the largest number of times?\n\n# Conclusions\n\nWriting this article was really interesting, and I enjoyed learning about the Olympics things that I didn't know. This article is far from being perfect but I feel, it serves its purpose. \n\nWriting SQL statements like this has its benefits as well as its limitations. \n\nSome of the positives include: \n* The ability to grab the needed data and plot it in Python or apply and subsequent processing to it is very interesting.\n\nAmong the limitations are:\n* If the query returns a large table, Jupyter could freeze and crash. To alleviate this issue, one can limit the size of returned rows by using `select top x`, for example. \n* Syntax highlighting, code auto completion, code formatting/linting are missing. \n\n","srcMarkdownNoYaml":"\n\n\n## Introduction\n\nPerforming data analysis, in many cases, requires loading the data from a database. Database engines are optimized for the efficient handling of data storage and retrieval. If the data is structured, which means the data follows a schema, querying the database is always performed using SQL, a domain specific language for data querying among other things.\n\nI have been using Jupyter notebooks for 4 years now, and I think the notebook concept is transformational. Being able to mix the analysis with the compute in one linear document is great. The other day I was looking at some SQL queries and thought to myself, I wish that could write those queries in Jupyter notebooks just like I do with Python, I had previously tried Matlab and Julia, why not SQL?\n\nAs you would imagine, the community has thought about this question way before I did and someone has made that possible in the form of a IPython extension 😍.\n\nThis post is my attempt at using SQL in the Jupyter notebook environment. The data we are going to use in this excercise the **20 years of Olympic history: athletes and results** from [Kaggle](https://www.kaggle.com/heesoo37/120-years-of-olympic-history-athletes-and-results). The analysis presented here is for practice only and for more detailed analysis of the olympic games, check [Olympians are probably older — and younger — than you think](https://www.washingtonpost.com/sports/olympics/2021/07/31/oldest-youngest-olympians/).\n\n\n\n## Motivation\n\nI have few reasons for writing this article:\n1. As a reminder for my future self, cause I tend to move on and forget 😅 as you can imagine,\n2. I hope it serves as an inspiration to you, the reader, to utilize this capability if you like it,\n3. Practice SQL, which I can't have enough of,\n4. Being able to send the calculations to the data rather than bring the data to compute is a super power in the Big Data era,\n5. Bringing the result of SQL queries back to Python rather than querying the database directly or using something like [SQL Server Management Studio](https://docs.microsoft.com/en-us/sql/ssms/download-sql-server-management-studio-ssms) or [MySQL Workbench](https://www.mysql.com/products/workbench/) allows us to visualize the data in whatever way we like.\n\n\nIt is important to mention that whatever we are doing here can be done within `Pandas` directly, however from a [scalability and effeciency perspectives](https://pandas.pydata.org/pandas-docs/stable/user_guide/scale.html), the ability to do most of the filtering and summerization at the database level is a clear advantage. \n\nThe database can be hosted anywhere. Which means the machine on which the analysis is carried out doesn't need to be highly resourced.\n\n### Why not an ORM?\nORM stands for Object Relational Mapping which according to [wikipedia](https://en.wikipedia.org/wiki/Object%E2%80%93relational_mapping):\n> a programming technique for converting data between incompatible type systems using object-oriented programming languages. This creates, in effect, a \"virtual object database\" that can be used from within the programming language.\n\nORMs hide the typical SQL interaction from the software developer, exposing the database as classes and objects with getters and setters. An typical example of an ORM are `SQLAlchemy` and `SQLModel` which builds on top `SQLAlchemy`. If you think that this is a good idea, I tend to agree as do most web frameworks but, the goal of this article is not to run away from SQL but to embrace it as universal tool that can be utilized on its own and in combination with most programming languages.\n\n### Why not Spark (or the likes)\nThis is a great question. If you have heard of Big Data tools such as [Spark](https://spark.apache.org/), this question would defintely come to your mind. Spark does what we are trying to achieve, and I am planning to cover it in a follow up writeup.\n\n\nHopefully, I managed to convince you of the benefits of being able to query databases using SQL rather than doing the same analysis in Pandas.\n\n\n\n## Required packages\n\nI am going to use the following packages in this article:\n\n* [`ipython-sql`](https://pypi.org/project/ipython-sql/)\n* [`Pandas`](https://pandas.pydata.org/)\n* [`Matplotlib`](https://matplotlib.org/)\n* [`SQLAlchemy`](https://www.sqlalchemy.org/)\n\n## Connecting to database\n\nThis first step is to establish a connection to the database you would like to work on. We are going to use the `ipython-sql` extension to write and pass our SQL queries. `ipython-sql` expects database string similar to those used by `SQLAlcehmy`. For more details about the database strings check [this page](https://docs.sqlalchemy.org/en/14/core/engines.html#database-urls).\n\nIn this article, I am going to use a local installation of [Microsoft SQL Server 2019 Express](https://www.microsoft.com/en-au/sql-server/sql-server-downloads). I have already downloaded MS-SQL server already and installed it. I then created a new database named `OlympicsHistory` and imported the two csv files from the Olympic History dataset into this database as a tables named `athlete_events`, `noc_region` .\n\n## How to handle queries and results\n\nNow that you succeeded connecting to the database, let's see how can we bring data from the database into Python. The `ipython-sql` extension offers three mode of access:\n\n    1. Print the results\n    2. Assignning the result of a single-line query \n    3. Assignning the result of a multi-line query\n\n**Note:** ignore the details of the queries for now and let's focus on the handling of queries, we will return to the details of the queries in the following section.\n\n###  1. Print the results\nYou use the magic command ([to learn more](https://ipython.readthedocs.io/en/stable/interactive/magics.html)) `%sql` for a single line and `%%sql` for multi-line queries. \n\n1.1. Single line query\n\n1.2. Multi-line query\n\n### 2. Assignning the result of a single-line query \n\nIf have used Python for data analysis, you might say this cool but, it would even nice if we could capture the result of the query as `Pandas` DataFrame! If you had this question in mind, to you I say, it is straight forward to that, have a look:\n\nI hope that you can see the power in what I just demonstrated.\n\n## Data Analysis using SQL\n\nEnough of the preparation, let's into the fun part, analysing the data, asking and answering questions about it.\n\nAs a first step, let's familiarize ourselves with the two tables we have\n\nLooking up `SGP` reveals that this is the code for [Singapore](https://olympics.com/ioc/singapore). This begs the question, why was this code missing from the `noc_regions` table? Let's further investigate this table\n\nLet's further investigate the `athlete_events` table for instances of the codes `SIN` and `SGP` \n\nOk, so the code `SIN` has never been used in the `athlete_events`. A quick [web search](https://www.facebook.com/sgolympics/photos/a.1591488417735290/1747292968821500/?type=3) revealed that `SGP` has replaced `SIN` in 2016.\n\nIn this case, I think, it would be a good idea to keep both codes in the `noc_regions` table. Let's add `SGP`\n\nThere seems to be a bug in `SQLAlchemy` which makes ealier SQL code error. We can safely ignore this error as the code seems to be doing what is supposed to do, let's verify:\n\nWe can now perform joins without any `NULL`s.\n\nLet's begin with the data interrogation:\n\n#### Which cities host the Olympics more that once?\n\n#### Find the seasons for each year as two columns (Summer, Winter)\n\n#### What is the average age of participants?\n\n#### What is the average age per season?\n\n#### Is the average age fixed across the seasons and years?\n\nThe average for summer Olympics in 1932 looks too high, is this a valid result? if yes why did it happen?\n\nSo, the average age was high, why is that the case?\nLet's look at a more statistics about the games broken down by year and season.\n\nIt is clear that there's a high variability in participants ages in 1932. Let's have a closer look at the data to find out what could the reason behind that be. \n\nIn which sport did older participants take part in?\n\nOh, the older folks participated in Art Competitions.\nLet's see what impact does removing `Art Competitions` have on the age distribution.\n\nI am statisfied with this now, it seems to match the result reported in [here](https://www.washingtonpost.com/sports/olympics/2021/07/31/oldest-youngest-olympians/).\n\n#### What is trend of age in each season? \nThis is a fun question, let's try to find the slope of the best fit line across the previous plots. This can be achieved by implementing the equation of the slope of single variable linear regression:\n$$b= \\frac{n\\sum{xy} - \\sum{x}\\sum{y}}{n\\sum{x^2}-(\\sum{x})^2}$$\n\nWe can see a stronger negative trend in summer events than in winter events.\n\n#### What is the number of participating nations for each year and season?\n\nFew observation:\n* The number of participating nations has been increasing since the inception of the first Olympic season in 1896.\n* The first winter Olympics was held in 1924. \n* Less nations participate in the winter Olympics as compared with the summer ones. \n* Since 1992, the Olympics are held every two years for alternating seasons.\n\n####  In which years and seasons did Iraq not participate in the Olympics?\n\n#### What is the number of medals per Sport for sports which have more than 500 medals granted?\n\n#### Which countries participated less than 5 times in the Olympics?\n\n#### Which are the top 5 countries by the number of Judo players?\n\n#### What is percentage of Judo players in each of these countries?\n\n#### Which are the top 5 countries by the number of medals in judo?\n\n#### Who are the top 5 players who participated the largest number of times?\n\n# Conclusions\n\nWriting this article was really interesting, and I enjoyed learning about the Olympics things that I didn't know. This article is far from being perfect but I feel, it serves its purpose. \n\nWriting SQL statements like this has its benefits as well as its limitations. \n\nSome of the positives include: \n* The ability to grab the needed data and plot it in Python or apply and subsequent processing to it is very interesting.\n\nAmong the limitations are:\n* If the query returns a large table, Jupyter could freeze and crash. To alleviate this issue, one can limit the size of returned rows by using `select top x`, for example. \n* Syntax highlighting, code auto completion, code formatting/linting are missing. \n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":false,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"jupyter"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../../styles.css"],"output-file":"Efficient-Data-Analysis-SQL-and-Python.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","theme":"slate","title-block-banner":true,"title":"Efficient Data Analysis - SQL and Python","author":"Waseem Waheed","date":"2021-08-10","categories":["Python","SQL"]},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}